buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}
apply plugin: 'android'
apply from: "${rootDir}/android_common.gradle"

repositories {
    mavenCentral()
}

// Signing of the release build with keys in an external configuration
// Configured in gradle.properties
if (project.hasProperty("MyProject.local")
        && new File(project.property("MyProject.local") + "/signing.gradle").exists()) {
    apply from: project.property("MyProject.local") + "/signing.gradle";
}

/**
 * Used for dagger-compiler
 */
configurations {
    preprocess
}

android {
    defaultConfig {
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    productFlavors {
    }
    lintOptions {
        disable 'InvalidPackage'
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    compile 'com.squareup.dagger:dagger:1.2.1'
    preprocess 'com.squareup.dagger:dagger-compiler:1.2.1'
    compile project(':libraries:todo-domain')
    compile 'com.android.support:support-v4:19.1+'
    compile 'com.jakewharton:butterknife:5.0.0+'
    compile 'de.keyboardsurfer.android.widget:crouton:1.8.4+'
    compile 'de.greenrobot:eventbus:2.2.0+'
    compile 'net.sourceforge.findbugs:annotations:1.3.2'
    compile 'com.google.code.findbugs:jsr305:2.0.3'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

/**
 * Used for dagger-compiler
 */
android.applicationVariants.all { variant ->
    //Where to place the generated code
    def output=file("${project.buildDir}/source/dagger_gen/${variant.dirName}")
    variant.ext.set("dagger_gen_${variant.dirName}", output)

    println "******   DAGGER Compile ****"
    println "variant  : ${variant.name}"
    println "manifest : ${variant.processResources.manifestFile}"
    println "output   : ${output}"
    println "****************************"


    //Do the actual preprocessor things
    variant.javaCompile.doFirst {
        File out = variant.ext.get("dagger_gen_${variant.dirName}")
        out.mkdirs()
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.preprocess.getAsPath(),
                '-s', out
        ]
    }
}

