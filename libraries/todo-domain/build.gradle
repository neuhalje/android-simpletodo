buildscript {
    apply plugin: 'scala'
    apply from: "${rootDir}/java_common.gradle"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.maiflai:gradle-scalatest:0.3'
        classpath 'net.sf.proguard:proguard-gradle:4.11'
    }
}

apply plugin: 'scalatest'

dependencies {
    compile 'org.scala-lang:scala-library:2.11.+'
    compile project.ext.shareddeps['eventbus']
    compile project.ext.shareddeps['joda_time']

    //testCompile 'com.google.inject:guice:3.0'
    testCompile 'com.google.inject:guice:4.0-beta4'
    compile 'javax.inject:javax.inject:1'

    testCompile 'org.scalatest:scalatest_2.11:2.1.4+'

    testRuntime 'org.pegdown:pegdown:1.1.0'
}




ext.proguardEnabled = true

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: ['classes']) {
    ext {
        outDir = file("${buildDir}/proguard")
        shrunkenJar = "${outDir}/${archivesBaseName}-${version}-proguard.jar"
    }
    def systemLibs = "${System.getProperty('java.home')}/lib/rt.jar"
    def scalaJar = configurations.compile.find { it.name.startsWith('scala-library') }

    injars sourceSets.main.output.classesDir
    // injars scalaJar
    outjars shrunkenJar

    logger.info("configurations.compile:\t" + configurations.compile)
    logger.info("\"${System.getProperty('java6.home')}/jre/lib/rt.jar\"\n" + "}" +  "${System.getProperty('java6.home')}/jre/lib/rt.jar")
    logger.info("systemLibs=${systemLibs}")

    // logger.info("scalaJar:" + scalaJar)
    // logger.info("files(scalaJar):" + files(scalaJar))
    // logger.info("configurations.providedCompile:\t" + configurations.providedCompile)
    // logger.info("configurations.serviceCompile:\t" + configurations.serviceCompile)

    // libraryjars configurations.compile - files(scalaJar) + configurations.serviceCompile + configurations.providedCompile
    libraryjars  systemLibs
    libraryjars configurations.compile
    configuration 'proguard-rules-todo-domain.txt'
}

task shrinkJar(type: Jar, dependsOn: ['proguard']) {

//    from(zipTree(jar.archivePath)) {
//        exclude 'WEB-INF/classes/**/*.class'
//        exclude 'WEB-INF/lib/scala-library*'
 //   }

    from(zipTree(proguard.shrunkenJar))
}


task jar(type: Jar, dependsOn: ['proguard'], overwrite: true) {
    from(zipTree(proguard.shrunkenJar))
}



